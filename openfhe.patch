diff -ruN openfhe-development/CMakeLists.txt openfhe-development-changes/CMakeLists.txt
--- openfhe-development/CMakeLists.txt	2025-07-15 19:21:02.080483267 +0100
+++ openfhe-development-changes/CMakeLists.txt	2025-07-15 19:20:49.093312055 +0100
@@ -62,10 +62,10 @@
 else()
     option(BUILD_SHARED "Set to ON to build shared versions of the library"            ON  )
     option(BUILD_STATIC "Set to ON to build static versions of the library"            OFF )
-    option(BUILD_UNITTESTS "Set to ON to build unit tests for the library"             ON  )
-    option(BUILD_EXAMPLES "Set to ON to build examples for the library"                ON  )
-    option(BUILD_BENCHMARKS "Set to ON to build benchmarks for the library"            ON  )
-    option(WITH_OPENMP "Use OpenMP to enable <omp.h>"                                  ON  )
+    option(BUILD_UNITTESTS "Set to ON to build unit tests for the library"             OFF )
+    option(BUILD_EXAMPLES "Set to ON to build examples for the library"                OFF )
+    option(BUILD_BENCHMARKS "Set to ON to build benchmarks for the library"            OFF )
+    option(WITH_OPENMP "Use OpenMP to enable <omp.h>"                                  OFF )
 endif()
 
 option(BUILD_EXTRAS "Set to ON to build extras for the library"                        OFF )
diff -ruN openfhe-development/src/core/include/math/hal/intnat/transformnat-impl.h openfhe-development-changes/src/core/include/math/hal/intnat/transformnat-impl.h
--- openfhe-development/src/core/include/math/hal/intnat/transformnat-impl.h	2025-07-15 19:21:02.080483267 +0100
+++ openfhe-development-changes/src/core/include/math/hal/intnat/transformnat-impl.h	2025-07-15 19:20:49.119312398 +0100
@@ -46,6 +46,8 @@
 #include "utils/inttypes.h"
 #include "utils/utilities.h"
 
+#include "../../../ntt/ntt-rvv.h"
+
 #include <map>
 #include <vector>
 
@@ -302,74 +304,14 @@
 void NumberTheoreticTransformNat<VecType>::ForwardTransformToBitReverseInPlace(const VecType& rootOfUnityTable,
                                                                                const VecType& preconRootOfUnityTable,
                                                                                VecType* element) {
-    //
-    // NTT based on the Cooley-Tukey (CT) butterfly
-    // Inputs: element (vector of size n in standard ordering)
-    //         rootOfUnityTable (precomputed roots of unity in bit-reversed ordering)
-    // Output: NTT(element) in bit-reversed ordering
-    //
-    // for (m = 1, t = n, logt = log(t); m < n; m=2*m, t=t/2, --logt) do
-    //     for (i = 0; i < m; ++i) do
-    //         omega = rootOfUnityInverseTable[i + m]
-    //         for (j1 = (i << logt), j2 = (j1 + t); j1 < j2; ++j1) do
-    //             loVal = element[j1 + 0]
-    //             hiVal = element[j1 + t]*omega
-    //             element[j1 + 0] = (loVal + hiVal) mod modulus
-    //             element[j1 + t] = (loVal - hiVal) mod modulus
-    //
-
-    const auto modulus{element->GetModulus()};
-    const uint32_t n(element->GetLength() >> 1);
-    for (uint32_t m{1}, t{n}, logt{GetMSB(t)}; m < n; m <<= 1, t >>= 1, --logt) {
-        for (uint32_t i{0}; i < m; ++i) {
-            auto omega{rootOfUnityTable[i + m]};
-            auto preconOmega{preconRootOfUnityTable[i + m]};
-            for (uint32_t j1{i << logt}, j2{j1 + t}; j1 < j2; ++j1) {
-                auto omegaFactor{(*element)[j1 + t]};
-                omegaFactor.ModMulFastConstEq(omega, modulus, preconOmega);
-                auto loVal{(*element)[j1 + 0]};
-#if defined(__GNUC__) && !defined(__clang__)
-                auto hiVal{loVal + omegaFactor};
-                if (hiVal >= modulus)
-                    hiVal -= modulus;
-                if (loVal < omegaFactor)
-                    loVal += modulus;
-                loVal -= omegaFactor;
-                (*element)[j1 + 0] = hiVal;
-                (*element)[j1 + t] = loVal;
-#else
-                // fixes Clang slowdown issue, but requires lowVal be less than modulus
-                (*element)[j1 + 0] += omegaFactor - (omegaFactor >= (modulus - loVal) ? modulus : 0);
-                if (omegaFactor > loVal)
-                    loVal += modulus;
-                (*element)[j1 + t] = loVal - omegaFactor;
-#endif
-            }
-        }
-    }
-    // peeled off last ntt stage for performance
-    for (uint32_t i{0}; i < (n << 1); i += 2) {
-        auto omegaFactor{(*element)[i + 1]};
-        auto omega{rootOfUnityTable[(i >> 1) + n]};
-        auto preconOmega{preconRootOfUnityTable[(i >> 1) + n]};
-        omegaFactor.ModMulFastConstEq(omega, modulus, preconOmega);
-        auto loVal{(*element)[i + 0]};
-#if defined(__GNUC__) && !defined(__clang__)
-        auto hiVal{loVal + omegaFactor};
-        if (hiVal >= modulus)
-            hiVal -= modulus;
-        if (loVal < omegaFactor)
-            loVal += modulus;
-        loVal -= omegaFactor;
-        (*element)[i + 0] = hiVal;
-        (*element)[i + 1] = loVal;
-#else
-        (*element)[i + 0] += omegaFactor - (omegaFactor >= (modulus - loVal) ? modulus : 0);
-        if (omegaFactor > loVal)
-            loVal += modulus;
-        (*element)[i + 1] = loVal - omegaFactor;
-#endif
-    }
+    uint64_t modulus{element->GetModulus()};    // element->m_modulus;
+    uint32_t n(element->GetLength()), t{n >> 1}, logt{GetMSB(t)};
+
+    uint64_t *element_pointer = (uint64_t *) &((*element)[0]);
+    uint64_t *rootOfUnityTable_pointer = (uint64_t *)&(rootOfUnityTable[0]);
+    uint64_t *preconRootOfUnityTable_pointer = (uint64_t *)&(preconRootOfUnityTable[0]);
+
+    ntt_korn_lambiote_vector(n,t,logt,modulus,element_pointer,rootOfUnityTable_pointer,preconRootOfUnityTable_pointer);
 }
 
 template <typename VecType>
@@ -511,116 +453,15 @@
 void NumberTheoreticTransformNat<VecType>::InverseTransformFromBitReverseInPlace(
     const VecType& rootOfUnityInverseTable, const VecType& preconRootOfUnityInverseTable, const IntType& cycloOrderInv,
     const IntType& preconCycloOrderInv, VecType* element) {
-    //
-    // INTT based on the Gentleman-Sande (GS) butterfly
-    // Inputs: element (vector of size n in bit-reversed ordering)
-    //         rootOfUnityInverseTable (precomputed roots of unity in bit-reversed ordering)
-    //         cycloOrderInv (n inverse)
-    // Output: INTT(element) in standard ordering
-    //
-    // for (m = n/2, t = 1, logt = 1; m >= 1; m=m/2, t=2*t, ++logt) do
-    //     for (i = 0; i < m; ++i) do
-    //         omega = rootOfUnityInverseTable[i + m]
-    //         for (j1 = (i << logt), j2 = (j1 + t); j1 < j2; ++j1) do
-    //             loVal = element[j1 + 0]
-    //             hiVal = element[j1 + t]
-    //             element[j1 + 0] = (loVal + hiVal) mod modulus
-    //             element[j1 + t] = (loVal - hiVal)*omega mod modulus
-    // for (i = 0; i < n; ++i) do
-    //     element[i] = element[i]*cycloOrderInv mod modulus
-    //
-
-    auto modulus{element->GetModulus()};
+    uint64_t modulus{element->GetModulus()};
     uint32_t n(element->GetLength());
 
-    // precomputed omega[bitreversed(1)] * (n inverse). used in final stage of intt.
-    auto omega1Inv{rootOfUnityInverseTable[1].ModMulFastConst(cycloOrderInv, modulus, preconCycloOrderInv)};
-    auto preconOmega1Inv{omega1Inv.PrepModMulConst(modulus)};
-
-    if (n > 2) {
-        // peeled off first stage for performance
-        for (uint32_t i{0}; i < n; i += 2) {
-            auto omega{rootOfUnityInverseTable[(i + n) >> 1]};
-            auto preconOmega{preconRootOfUnityInverseTable[(i + n) >> 1]};
-            auto loVal{(*element)[i + 0]};
-            auto hiVal{(*element)[i + 1]};
-#if defined(__GNUC__) && !defined(__clang__)
-            auto omegaFactor{loVal};
-            if (omegaFactor < hiVal)
-                omegaFactor += modulus;
-            omegaFactor -= hiVal;
-            loVal += hiVal;
-            if (loVal >= modulus)
-                loVal -= modulus;
-            omegaFactor.ModMulFastConstEq(omega, modulus, preconOmega);
-            (*element)[i + 0] = loVal;
-            (*element)[i + 1] = omegaFactor;
-#else
-            auto omegaFactor{loVal + (hiVal > loVal ? modulus : 0) - hiVal};
-            loVal += hiVal - (hiVal >= (modulus - loVal) ? modulus : 0);
-            (*element)[i + 0] = loVal;
-            omegaFactor.ModMulFastConstEq(omega, modulus, preconOmega);
-            (*element)[i + 1] = omegaFactor;
-#endif
-        }
-    }
-    // inner stages
-    for (uint32_t m{n >> 2}, t{2}, logt{2}; m > 1; m >>= 1, t <<= 1, ++logt) {
-        for (uint32_t i{0}; i < m; ++i) {
-            auto omega{rootOfUnityInverseTable[i + m]};
-            auto preconOmega{preconRootOfUnityInverseTable[i + m]};
-            for (uint32_t j1{i << logt}, j2{j1 + t}; j1 < j2; ++j1) {
-                auto loVal{(*element)[j1 + 0]};
-                auto hiVal{(*element)[j1 + t]};
-#if defined(__GNUC__) && !defined(__clang__)
-                auto omegaFactor{loVal};
-                if (omegaFactor < hiVal)
-                    omegaFactor += modulus;
-                omegaFactor -= hiVal;
-                loVal += hiVal;
-                if (loVal >= modulus)
-                    loVal -= modulus;
-                omegaFactor.ModMulFastConstEq(omega, modulus, preconOmega);
-                (*element)[j1 + 0] = loVal;
-                (*element)[j1 + t] = omegaFactor;
-#else
-                (*element)[j1 + 0] += hiVal - (hiVal >= (modulus - loVal) ? modulus : 0);
-                auto omegaFactor = loVal + (hiVal > loVal ? modulus : 0) - hiVal;
-                omegaFactor.ModMulFastConstEq(omega, modulus, preconOmega);
-                (*element)[j1 + t] = omegaFactor;
-#endif
-            }
-        }
-    }
+    uint64_t *element_pointer = (uint64_t *) &((*element)[0]);
+    uint64_t *rootOfUnityInverseTable_pointer = (uint64_t *)&(rootOfUnityInverseTable[0]);
+    uint64_t *preconRootOfUnityInverseTable_pointer = (uint64_t *)&(preconRootOfUnityInverseTable[0]);
+
+    intt_pease_vector_mulh(n,modulus,element_pointer,rootOfUnityInverseTable_pointer, preconRootOfUnityInverseTable_pointer,(uint64_t)cycloOrderInv,(uint64_t) preconCycloOrderInv);
 
-    // peeled off final stage to implement optimization where n/2 scalar multiplies
-    // by (n inverse) are incorporated into the omegaFactor calculation.
-    // Please see https://github.com/openfheorg/openfhe-development/issues/872 for details.
-    uint32_t j2{n >> 1};
-    for (uint32_t j1{0}; j1 < j2; ++j1) {
-        auto loVal{(*element)[j1]};
-        auto hiVal{(*element)[j1 + j2]};
-#if defined(__GNUC__) && !defined(__clang__)
-        auto omegaFactor{loVal};
-        if (omegaFactor < hiVal)
-            omegaFactor += modulus;
-        omegaFactor -= hiVal;
-        loVal += hiVal;
-        if (loVal >= modulus)
-            loVal -= modulus;
-        omegaFactor.ModMulFastConstEq(omega1Inv, modulus, preconOmega1Inv);
-        (*element)[j1 + 0]  = loVal;
-        (*element)[j1 + j2] = omegaFactor;
-#else
-        (*element)[j1] += hiVal - (hiVal >= (modulus - loVal) ? modulus : 0);
-        auto omegaFactor = loVal + (hiVal > loVal ? modulus : 0) - hiVal;
-        omegaFactor.ModMulFastConstEq(omega1Inv, modulus, preconOmega1Inv);
-        (*element)[j1 + j2] = omegaFactor;
-#endif
-    }
-    // perform remaining n/2 scalar multiplies by (n inverse)
-    for (uint32_t i = 0; i < j2; ++i)
-        (*element)[i].ModMulFastConstEq(cycloOrderInv, modulus, preconCycloOrderInv);
 }
 
 template <typename VecType>
